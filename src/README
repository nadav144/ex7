nadav144
jirsch

OO Design:
----------
Our design is as follows:
Our basic building blocks are two interfaces - Command and Expression.
An Expression is everything that can be classified as a right-hand side operand
or an array position assignment, it can be a single literal (e.g. 5, 'f', b) or
a complex argument containing operations and method invocations.
A Command is a representation of a single line of code. It could be a
declaration, assignment or whatever. It may be composed of expression if needed.

To those interfaces we add the declarations (Variable and Method declarations
and Type metadata) and a scope object that contains the context of the command.
In order to evaluate an expression such as 5+a, we need to know what 'a' is,
and that is contained in the scope. Each scope has a collection of the variables
declared within it (including names, types and initialization status).

The compiler class receives the string representation of the file being compiled.
First, it extracts the method and global variables metadata into the MainScope,
and then it parses the file line by line using the CommandFactory. Whenever we 
reach a new scope we carry on recursively (method containing a loop containing a
loop containing a condition etc.). Each line is validated against its containing
scope, until we encounter an error or we finish the compilation. 

Ruled out options:
------------------
We considered storing the Variable declarations in a Stack similar to the way
the OS runs a program, but when we tried to implement it, it felt a bit awkward
and we found ourselves having to pass it to many layers of code because it was
needed somewhere. We eventually decided to use the Scope class instead.

It took us a while to figure out who will do any work other than the Compiler.
Eventually we divided responsibility such that the compiler only knows patterns
and the commands validate themselves using the scope.

It also took us some time to distinguish between a general command, and the more
specific case of an expression and to see that they are two different things.
Since we separated them, development was much easier. 
 
Adding new types:
-----------------
We'd need to add the type to the TermType class (to indicate legal assignments)
and add a specific regex pattern to ExpressionFactory that captures it. 
Finally, we'll need a new LiteralExpression class to validate it, and thats it.
 
If-Else block
-------------
Right now, when we encounter sub-scopes (such as a loop in a method) we process
the inner scope, but discard it afterwards. In order to evaluate if-else scopes
we'll need to retain the previous sibling scope processed and make sure it is
and if-scope. Other than that, its business as usual.

Error Handling:
---------------
We divided errors into two type:
The first are 'critical' errors such as lines containing gibberish and in
general statements that did not fit into any of the optional legal patterns.
Such errors were thrown via exceptions tailored to our project, and later
wrapped with a ValidationResult.

The second type were language errors (such as invalid assignments etc) which
were returned using the ValidationResult class, without using exceptions, since
the errors are well defined, and exceptions is an expensive mechanism.
 
Regex
------
We actually have no two main regex. We have plenty, each capturing a specific
Command \ Expression. Two for example are:
 
(int|double|String|boolean|char)\\s*(\\[\\s*\\])?\\s*(\\w*)\\s*(?:=(.*))?\\s*;  
which captures the declaration of a variable. It must contain one of the 
accepted types, an optional array indicator, a name and an optional assignment.

^\\s*([a-zA-Z]\\w*)\\s*\\((.*)\\)\\s*;?
which describes a method invocation. It imposes the conditions on the method
name, and forces the existence of brackets. 